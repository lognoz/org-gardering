#+LATEX_HEADER: \usepackage[margin=18mm]{geometry}
#+LATEX_HEADER: \usepackage{enumitem}
#+LATEX_HEADER: \usepackage{titlesec}
#+LATEX_HEADER: \setlist{leftmargin=4mm}
#+LATEX_HEADER: \setitemize{itemsep=-1mm}
#+LATEX_HEADER: \titlespacing{\section} {0mm}{10mm}{5mm}
#+LATEX_HEADER: \titlespacing*{\subsection} {0mm}{8mm}{3mm}
#+LATEX_HEADER: \renewcommand\labelitemi{$\vcenter{\hbox{\tiny$\bullet$}}$}
#+OPTIONS: num:2

* Plants :noexport:
:PROPERTIES:
:ID: f063a506-a114-11ed-b503-d8cb8a7c0478
:END:

#+TBLNAME: plants
| Plante          | Espacement (cm) | Durée avant transplants (semaine) | Profondeur (cm) | Éclaircisage (cm) |
|-----------------+-----------------+-----------------------------------+-----------------+-------------------|
| Mesclun         |               2 |                                 0 |                 |                   |
| Carotte         |               2 |                                 0 |                 |                   |
| Radis           |               2 |                                 0 |                 |                   |
| Laitue          |              30 |                                 4 |                 |                   |
| Pois mange-tout |               3 |                                 0 |                 |                   |
| Haricot         |               3 |                                 0 |                 |                   |
| Concombre       |              30 |                                 3 |                 |                   |
| Chou nappa      |              30 |                                 4 |                 |                   |
| Cerise de terre |              45 |                                 8 |                 |                   |
| Piment          |              30 |                                 9 |                 |                   |
| Poivron         |              30 |                                 9 |                 |                   |
| Épinard         |              15 |                                 4 |                 |                   |
| Chou-fleur      |              45 |                                 4 |                 |                   |
| Phacélie        |               2 |                                 0 |             0.5 |                   |
| Rutabaga        |               3 |                                 0 |               1 |                15 |
| Fraisier        |              20 |                                 0 |                 |                   |

* Variétés :noexport:
:PROPERTIES:
:ID:       b2f650a4-a264-11ed-b503-d8cb8a7c0478
:END:

#+TBLNAME: varieties
| Plante                  | Variété                  | Nom                             | Fournisseur           | Espacement (cm) | Durée avant transplants (semaine) |
|-------------------------+--------------------------+---------------------------------+-----------------------+-----------------+-----------------------------------|
| Carotte                 | Scarlet Nantes           | Carotte Scarlet Nantes          | West coast seeds      |               2 |                                 0 |
| Radis                   | French Breakfast         | Radis French Breakfast          | West coast seeds      |               2 |                                 0 |
| Laitue                  | Buttercrunch             | Laitue Buttercrunch             | West coast seeds      |              30 |                                 4 |
| Laitue                  | Grosse Blonde Paresseuse | Laitue Grosse Blonde Paresseuse | Jardins de l'écoumène |              30 |                                 4 |
| Laitue                  | Romaine Rouge d'Hiver    | Laitue Romaine Rouge d'Hiver    | Jardins de l'écoumène |              30 |                                 4 |
| Épinard                 | Bloomsdale Savoy         | Épinard Bloomsdale Savoy        | West coast seeds      |              15 |                                 4 |
| Mesclun                 | Allstar                  | Mesclun Allstar                 | Johnny's seeds        |               2 |                                 0 |
| Pois mange-tout         | Sugar Ann                | Pois mange-tout Sugar Ann       | Johnny's seeds        |               3 |                                 0 |
| Pois mange-tout         | Super Sugar              | Pois mange-tout Super Sugar     | West coast seeds      |               3 |                                 0 |
| Concombre               | H-19 Little Leaf         | Concombre H-19 Little Leaf      | Johnny's seeds        |              30 |                                 3 |
| Chou nappa              | Wong Bok                 | Chou nappa Wong Bok             | Gaia Organics         |              30 |                                 4 |
| Cerise de terre         |                          | Cerise de terre                 | Société des plantes   |              45 |                                 8 |
| Piment                  | Chili                    | Piment Chili                    | Gaia Organics         |              30 |                                 9 |
| Poivron                 | Sweet Chocolate          | Poivron Sweet Chocolate         | Société des plantes   |              30 |                                 9 |
| Haricot                 | Provider                 | Haricot Provider                | Johnny's seeds        |               3 |                                 0 |
| Chou-fleur              | Walcheren Winter         | Chou-fleur Walcheren Winter     | West coast seeds      |              45 |                                 4 |
| Rutabaga                | Joan                     | Rutabaga Joan                   | Société des plantes   |               3 |                                 0 |
| Phacélie                |                          | Phacélie                        | Jardins de l'écoumène |               2 |                                 0 |
| Fraisier                |                          | Fraisier                        | Pépinière ancestrale  |              20 |                                 0 |
| Échalote de Sainte-Anne |                          | Échalote de Sainte-Anne         | Jardins de l'écoumène |              15 |                                 0 |
#+TBLFM: $3='(concat $1 " " $2) :: $5='(plant-space $1 $5) :: $6='(plant-week-before-transplant $1 $6)

* Buttes :noexport:
:PROPERTIES:
:ID: 734d5eca-a114-11ed-b503-d8cb8a7c0478
:END:

#+TBLNAME: raised-beds
| Butte | Longueur (m) | Longueur (cm) |
|-------+--------------+---------------|
| S1    |          5.5 |           550 |
| S2    |          5.5 |           550 |
| S3    |            6 |           600 |
| S5    |          5.5 |           550 |
| S6    |          5.5 |           550 |
| S7    |            6 |           600 |
| Kiwi  |         18.6 |          1860 |
| VO    |        18.22 |          1822 |
| VN    |        21.22 |          2122 |
| FR    |          9.5 |           950 |
#+TBLFM: $3=$2*100;%.0f


* Org Functions :noexport:

#+BEGIN_SRC emacs-lisp :session :exports none :cache yes
  ;;  Copyright (C) 2023 Marc-Antoine Loignon

  ;;  This program is free software; you can redistribute it and/or modify
  ;;  it under the terms of the GNU General Public License as published by
  ;;  the Free Software Foundation; either version 3, or (at your option)
  ;;  any later version.

  ;;  This program is distributed in the hope that it will be useful, but
  ;;  WITHOUT ANY WARRANTY; without even the implied warranty of
  ;;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU

  ;;  General Public License for more details.
  ;;  You should have received a copy of the GNU General Public License
  ;;  along with this program see the file LICENSE. If not see
  ;;  <http://www.gnu.org/licenses/>.

  (setq org-latex-tables-centered nil)

  (defvar tables-id
    '(("plants" . "f063a506-a114-11ed-b503-d8cb8a7c0478")
      ("varieties" . "b2f650a4-a264-11ed-b503-d8cb8a7c0478")
      ("raised-beds" . "734d5eca-a114-11ed-b503-d8cb8a7c0478"))
    "Tables reference id to make them usable in all files.")

  (defun remote-range (column)
    "Returns formatted remote range for `remote-value-by-reference'."
    (format "@2$%s..@>$%s" column column))

  (defun remote-value-by-reference (&rest args)
    "Lookups table and returns remote value by given ARGS."
    (let* ((default-value (plist-get args :default-value))
           (reference (plist-get args :reference))
           (reference-range (remote-range (plist-get args :table-reference-column)))
           (return-range (remote-range (plist-get args :table-return-column)))
           (table-name (plist-get args :table-name))
           (table-return-column (plist-get args :table-column-return))
           (table-id (cdr (assoc table-name tables-id)))
           (remote-value (org-lookup-first reference
                           (org-table-get-remote-range table-id reference-range)
                           (org-table-get-remote-range table-id return-range))))
      (if remote-value
          remote-value
        (when default-value
          default-value))))

  (defun raised-bed-width (raised-bed)
    "Returns raised bed width."
    (remote-value-by-reference
     :reference raised-bed
     :table-name "raised-beds"
     :table-reference-column "1"
     :table-return-column "3"))

  (defun raised-bed-quantity (raised-bed space row)
    "Returns quantity by raised bed width."
    (let ((width (string-to-number (raised-bed-width raised-bed)))
          (space (string-to-number space))
          (row (string-to-number row)))
      (* (/ width space) row)))

  (defun variety-space (plant)
    "Returns plant space between each other."
    (remote-value-by-reference
     :reference plant
     :table-name "varieties"
     :table-reference-column "3"
     :table-return-column "5"))

  (defun variety-week-before-transplant (plant)
    "Returns week before transplant."
    (remote-value-by-reference
     :reference plant
     :table-name "varieties"
     :table-reference-column "3"
     :table-return-column "6"))

  (defun plant-space (plant default-value)
    "Returns plant space between each other."
    (remote-value-by-reference
     :default-value default-value
     :reference plant
     :table-name "plants"
     :table-reference-column "1"
     :table-return-column "2"))

  (defun plant-week-before-transplant (plant default-value)
    "Returns week before transplant."
    (remote-value-by-reference
     :default-value default-value
     :reference plant
     :table-name "plants"
     :table-reference-column "1"
     :table-return-column "3"))


  ;;; Org element:

  (defun element-parents (element index)
    "Returns parents element by index."
    (dotimes (number index)
      (setq element (org-element-property :parent element)))
    element)

  (defun element-subsection (element)
    "Returns headline subsection by given table."
    (org-element-property :raw-value (element-parents element 2)))

  (defun element-section (element)
    "Returns headline section by given table."
    (org-element-property :raw-value (element-parents element 3)))

  (defun element-format-table (element section row-func)
    "Returns table formatted."
    (let ((new-content (list section "hline"))
          (header)
          (header-found-p)
          (content (org-table-to-lisp (org-element-interpret-data element))))
      (dolist (row content)
        (when (not header-found-p)
          (setq header-found-p t)
          (setq header row))
        (when (and (listp row)
                   (not (equal header row)))
          (setq row (funcall row-func row))
          (add-to-list 'new-content row t)))
      new-content))

  (defun element-table (subsection-expected row-func)
    "Fetchs and return tables located in file."
    (org-element-map (org-element-parse-buffer) 'table
      (lambda (element)
        (let ((subsection (element-subsection element))
              (section (element-section element)))
          (when (string= subsection subsection-expected)
            (element-format-table element section row-func))))))


  (setq sowing-tables-results nil)

  (defun element-sowing-tables ()
    "Returns spaced tables content."
    (when (not sowing-tables-results)
      (setq sowing-tables-results
            (element-table "Espacement"
              (lambda (row)
                (setq row (append row (list (variety-week-before-transplant (nth 1 row)))))
                row))))
    sowing-tables-results)
#+END_SRC

#+RESULTS[d82df70b8b51f663a40250c75bdd99249651f49c]:
: element-sowing-tables

#+BEGIN_SRC python :session :exports none :python python3.8 :cache yes
  def get_months_with_variations():
      """
      Gets months with its possible variations.
      """
      months_with_variations = []
      months = [
          " de janvier",
          " de février",
          " de mars",
          " d'avril",
          " de mai",
          " de juin",
          " de juillet",
          " d'août",
          " de septembre",
          " de octobre",
          " de novembre",
          " de décembre"
      ]

      for month in months:
         for variation in ["1ère semaine", "2e semaine", "3e semaine", "4e semaine"]:
             months_with_variations.append(variation + month)

      return months_with_variations

  def get_transplant_date(section):
      """
      Gets months located on given section.
      """
      section = section.strip()
      section = section.lower()

      for month in months:
          month_lowercase = month.lower()
          if section.endswith(month_lowercase):
             return month

      return "—"

  def get_sowing_date(transplant_date, week_before_transplant):
      """
      Gets months after subtract number of week.
      """
      try:
          index = months.index(transplant_date)
          sowing_index = index - week_before_transplant
          return months[sowing_index]
      except:
          return "—"

  def get_tables_formatted(content):
      """
      Gets tables content formatted.
      """
      tables_formatted = []
      for table in content:
          section = None
          is_section_found = False

          for row in table:
              if not is_section_found:
                  section = row
                  transplant_date = get_transplant_date(section)
                  is_section_found = True

              if row != section and row != "hline":
                  try:
                      sowing_date = get_sowing_date(transplant_date, int(row[5]))
                  except:
                      print(row)
                  tables_formatted.append([ row[0], row[1], row[4], transplant_date, sowing_date ])

      return tables_formatted

  def get_tables_rows_by_date(tables, column_use_as_date):
      """
      Gets tables rows formatted by date.
      """
      formatted_tables = {}
      for month in months:
          formatted_tables[month] = []

      for row in tables:
          date = row[column_use_as_date].lower()
          if date not in formatted_tables:
              formatted_tables[date] = []
          formatted_tables[date].append(row)

      return formatted_tables

  def sort_tables_by_date(tables, column_use_as_date):
      """
      Fetchs and returns tables formatted by date.
      """
      sorted_tables = []
      formatted_tables = get_tables_rows_by_date(tables, column_use_as_date)

      for date in formatted_tables:
          rows = formatted_tables[date]
          sorted_tables.extend(rows)
          if len(rows) > 0:
              sorted_tables.append(None)

      return sorted_tables

  def get_transplanting_planning_table(content):
      """
      Gets transplanting planning table.
      """
      table = []
      header = ["Butte", "Plant", "Quantité", "Date de transplation"]

      for row in get_tables_formatted(content):
          del row[4]
          table.append(row)

      table = sort_tables_by_date(table, 3)

      table.insert(0, header)
      table.insert(1, None)

      return table

  def get_sowing_planning_table(content):
      """
      Gets transplanting planning table.
      """
      table = []
      header = ["Butte", "Plant", "Quantité", "Semis (+40%)", "Date de semis"]

      for row in get_tables_formatted(content):
          if row[3] == row[4] and row[3] != "—":
              continue
          row[3] = round(float(row[2]) * 1.4)
          table.append(row)

      table = sort_tables_by_date(table, 4)

      table.insert(0, header)
      table.insert(1, None)

      return table

  def get_seeds_buying_planning_table(content):
      """
      Gets seeds buying planning table.
      """
      plants = {}

      for row in get_tables_formatted(content):
          name = row[1]
          quantity = int(row[2])
          if row[3] != row[4]:
              quantity = quantity * 1.4

          if name not in plants:
              plants[name] = 0

          plants[name] += round(quantity)

      table = []
      header = ["Plant", "Quantité minimum"]

      for name in plants:
          table.append([name, plants[name]])

      table.insert(0, header)
      table.insert(1, None)

      return table

  months = get_months_with_variations()
#+END_SRC

#+RESULTS[e13e621d763c05e9667eae56d05a4ffd2ad63f2d]:
