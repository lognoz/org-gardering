#+LATEX_HEADER: \usepackage[margin=18mm]{geometry}
#+LATEX_HEADER: \usepackage{enumitem}
#+LATEX_HEADER: \usepackage{titlesec}
#+LATEX_HEADER: \setlist{leftmargin=4mm}
#+LATEX_HEADER: \setitemize{itemsep=-1mm}
#+LATEX_HEADER: \titlespacing{\section} {0mm}{10mm}{5mm}
#+LATEX_HEADER: \titlespacing*{\subsection} {0mm}{8mm}{3mm}
#+LATEX_HEADER: \renewcommand\labelitemi{$\vcenter{\hbox{\tiny$\bullet$}}$}
#+OPTIONS: num:2

* Fournisseur :noexport:

#+TBLNAME: suppliers
| Fournisseur           | Recherche                                                          |
|-----------------------+--------------------------------------------------------------------|
| West coast seeds      | https://www.westcoastseeds.com/pages/search-results-1?q={}         |
| Jardins de l'écoumène | https://www.ecoumene.com/?s={}&post_type=product                   |
| Johnny's seeds        | https://www.johnnyseeds.com/search/?q={}&search-button=&lang=en_US |
| Gaia Organics         | https://gaiaorganics.ca/?s={}&post_type=product                    |
| Société des plantes   | https://www.lasocietedesplantes.com/?s={}                          |
| Pépinière ancestrale  | https://www.pepiniereancestrale.com/recherche?search_query={}      |

* Plants :noexport:
:PROPERTIES:
:ID: f063a506-a114-11ed-b503-d8cb8a7c0478
:END:

#+TBLNAME: plants
| Plante          | Espacement (cm) | Durée avant transplants (semaine) | Profondeur (cm) | Éclaircisage (cm) |
|-----------------+-----------------+-----------------------------------+-----------------+-------------------|
| Mesclun         |               2 |                                 0 |                 |                   |
| Carotte         |               2 |                                 0 |                 |                   |
| Radis           |               2 |                                 0 |                 |                   |
| Laitue          |              30 |                                 4 |                 |                   |
| Pois mange-tout |               3 |                                 0 |                 |                   |
| Haricot         |               3 |                                 0 |                 |                   |
| Concombre       |              30 |                                 3 |                 |                   |
| Chou nappa      |              30 |                                 4 |                 |                   |
| Cerise de terre |              45 |                                 8 |                 |                   |
| Piment          |              30 |                                 9 |                 |                   |
| Poivron         |              30 |                                 9 |                 |                   |
| Épinard         |              15 |                                 4 |                 |                   |
| Chou-fleur      |              45 |                                 4 |                 |                   |
| Phacélie        |               2 |                                 0 |             0.5 |                   |
| Rutabaga        |               3 |                                 0 |               1 |                15 |
| Fraisier        |              20 |                                 0 |                 |                   |

* Variétés :noexport:
:PROPERTIES:
:ID:       b2f650a4-a264-11ed-b503-d8cb8a7c0478
:END:

#+TBLNAME: varieties
| Plante                  | Variété                  | Nom                             | Fournisseur           | Espacement (cm) | Durée avant transplants (semaine) |
|-------------------------+--------------------------+---------------------------------+-----------------------+-----------------+-----------------------------------|
| Carotte                 | Scarlet Nantes           | Carotte Scarlet Nantes          | West coast seeds      |               2 |                                 0 |
| Radis                   | French Breakfast         | Radis French Breakfast          | West coast seeds      |               2 |                                 0 |
| Laitue                  | Buttercrunch             | Laitue Buttercrunch             | West coast seeds      |              30 |                                 4 |
| Laitue                  | Grosse Blonde Paresseuse | Laitue Grosse Blonde Paresseuse | Jardins de l'écoumène |              30 |                                 4 |
| Laitue                  | Romaine Rouge d'Hiver    | Laitue Romaine Rouge d'Hiver    | Jardins de l'écoumène |              30 |                                 4 |
| Épinard                 | Bloomsdale Savoy         | Épinard Bloomsdale Savoy        | West coast seeds      |              15 |                                 4 |
| Mesclun                 | Allstar                  | Mesclun Allstar                 | Johnny's seeds        |               2 |                                 0 |
| Pois mange-tout         | Sugar Ann                | Pois mange-tout Sugar Ann       | Johnny's seeds        |               3 |                                 0 |
| Pois mange-tout         | Super Sugar              | Pois mange-tout Super Sugar     | West coast seeds      |               3 |                                 0 |
| Concombre               | H-19 Little Leaf         | Concombre H-19 Little Leaf      | Johnny's seeds        |              30 |                                 3 |
| Chou nappa              | Wong Bok                 | Chou nappa Wong Bok             | Gaia Organics         |              30 |                                 4 |
| Cerise de terre         |                          | Cerise de terre                 | Société des plantes   |              45 |                                 8 |
| Piment                  | Chili                    | Piment Chili                    | Gaia Organics         |              30 |                                 9 |
| Poivron                 | Sweet Chocolate          | Poivron Sweet Chocolate         | Société des plantes   |              30 |                                 9 |
| Haricot                 | Provider                 | Haricot Provider                | Johnny's seeds        |               3 |                                 0 |
| Chou-fleur              | Walcheren Winter         | Chou-fleur Walcheren Winter     | West coast seeds      |              45 |                                 4 |
| Rutabaga                | Joan                     | Rutabaga Joan                   | Société des plantes   |               3 |                                 0 |
| Phacélie                |                          | Phacélie                        | Jardins de l'écoumène |               2 |                                 0 |
| Fraisier                |                          | Fraisier                        | Pépinière ancestrale  |              20 |                                 0 |
| Échalote de Sainte-Anne |                          | Échalote de Sainte-Anne         | Jardins de l'écoumène |              15 |                                 0 |
#+TBLFM: $3='(concat $1 " " $2) :: $5='(plant-space $1 $5) :: $6='(plant-week-before-transplant $1 $6)

* Buttes :noexport:
:PROPERTIES:
:ID: 734d5eca-a114-11ed-b503-d8cb8a7c0478
:END:

#+TBLNAME: raised-beds
| Butte | Longueur (m) | Longueur (cm) |
|-------+--------------+---------------|
| S1    |          5.5 |           550 |
| S2    |          5.5 |           550 |
| S3    |            6 |           600 |
| S5    |          5.5 |           550 |
| S6    |          5.5 |           550 |
| S7    |            6 |           600 |
| Kiwi  |         18.6 |          1860 |
| VO    |        18.22 |          1822 |
| VN    |        21.22 |          2122 |
| FR    |          9.5 |           950 |
#+TBLFM: $3=$2*100;%.0f


* Org Functions :noexport:

#+BEGIN_SRC emacs-lisp :session :exports none
  ;;  Copyright (C) 2023 Marc-Antoine Loignon

  ;;  This program is free software; you can redistribute it and/or modify
  ;;  it under the terms of the GNU General Public License as published by
  ;;  the Free Software Foundation; either version 3, or (at your option)
  ;;  any later version.

  ;;  This program is distributed in the hope that it will be useful, but
  ;;  WITHOUT ANY WARRANTY; without even the implied warranty of
  ;;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU

  ;;  General Public License for more details.
  ;;  You should have received a copy of the GNU General Public License
  ;;  along with this program see the file LICENSE. If not see
  ;;  <http://www.gnu.org/licenses/>.

  (require 'seq)


  ;;; Variables:

  (defvar tables-id
    '(("plants" . "f063a506-a114-11ed-b503-d8cb8a7c0478")
      ("varieties" . "b2f650a4-a264-11ed-b503-d8cb8a7c0478")
      ("raised-beds" . "734d5eca-a114-11ed-b503-d8cb8a7c0478"))
    "Tables reference id to make them usable in all files.")

  (defvar cached-request nil
    "Requests cached content.")


  ;;; Remote functions:

  (defun remote-range (column)
    "Returns formatted remote range for `remote-value-by-reference'."
    (format "@2$%s..@>$%s" column column))

  (defun remote-value-by-reference (&rest args)
    "Lookups table and returns remote value by given ARGS."
    (let* ((default-value (plist-get args :default-value))
           (reference (plist-get args :reference))
           (reference-range (remote-range (plist-get args :table-reference-column)))
           (return-range (remote-range (plist-get args :table-return-column)))
           (table-name (plist-get args :table-name))
           (table-return-column (plist-get args :table-column-return))
           (table-id (cdr (assoc table-name tables-id)))
           (remote-value (org-lookup-first reference
                           (org-table-get-remote-range table-id reference-range)
                           (org-table-get-remote-range table-id return-range))))
      (if remote-value
          remote-value
        (when default-value
          default-value))))

  (defun raised-bed-width (raised-bed)
    "Returns raised bed width."
    (remote-value-by-reference
     :reference raised-bed
     :table-name "raised-beds"
     :table-reference-column "1"
     :table-return-column "3"))

  (defun raised-bed-quantity (raised-bed space row)
    "Returns quantity by raised bed width."
    (let ((width (string-to-number (raised-bed-width raised-bed)))
          (space (string-to-number space))
          (row (string-to-number row)))
      (* (/ width space) row)))

  (defun variety-space (plant)
    "Returns plant space between each other."
    (remote-value-by-reference
     :reference plant
     :table-name "varieties"
     :table-reference-column "3"
     :table-return-column "5"))

  (defun variety-week-before-transplant (plant)
    "Returns week before transplant."
    (remote-value-by-reference
     :reference plant
     :table-name "varieties"
     :table-reference-column "3"
     :table-return-column "6"))

  (defun plant-space (plant default-value)
    "Returns plant space between each other."
    (remote-value-by-reference
     :default-value default-value
     :reference plant
     :table-name "plants"
     :table-reference-column "1"
     :table-return-column "2"))

  (defun plant-week-before-transplant (plant default-value)
    "Returns week before transplant."
    (remote-value-by-reference
     :default-value default-value
     :reference plant
     :table-name "plants"
     :table-reference-column "1"
     :table-return-column "3"))


  ;;; Org element:

  (defun element--parents (element index)
    "Returns parents element by index."
    (dotimes (number index)
      (setq element (org-element-property :parent element)))
    element)

  (defun element-table--parent-subsection (element)
    "Returns headline subsection by given table."
    (org-element-property :raw-value (element--parents element 2)))

  (defun element-table--parent-section (element)
    "Returns headline section by given table."
    (org-element-property :raw-value (element--parents element 3)))

  (defun element-table--format (element section)
    "Returns table formatted."
    (let ((new-content (list section "hline"))
          (header)
          (header-found-p)
          (content (org-table-to-lisp (org-element-interpret-data element))))
      (dolist (row content)
        (when (not header-found-p)
          (setq header-found-p t)
          (setq header row))
        (when (and (listp row)
                   (not (equal header row)))
          (add-to-list 'new-content row t)))
      new-content))

  (defun element-table (subsection-expected)
    "Fetchs and return tables located in file."
    (let ((cached-content (assoc subsection-expected cached-request)))
      (when (not cached-content)
        (setq cached-content
              (org-element-map (org-element-parse-buffer) 'table
                (lambda (element)
                  (let ((subsection (element-table--parent-subsection element))
                        (section (element-table--parent-section element)))
                    (when (string= subsection subsection-expected)
                      (element-table--format element section))))))
        (setf (alist-get subsection-expected cached-request) cached-content))
      (cdr (assoc subsection-expected cached-request))))

  (defun element-section ()
    "Returns all section located in file."
    (org-element-map (org-element-parse-buffer) 'headline
      (lambda (element)
        (when (= (org-element-property :level element) 2)
          (org-element-property :raw-value element)))))

  (defun element-user-completed-section ()
    "Returns all section that have been completed."
    (org-element-map (org-element-parse-buffer) 'headline
      (lambda (element)
        (when (and (= (org-element-property :level element) 3)
                   (string= (org-element-property :raw-value element) "Espacement"))
          (org-element-property :raw-value (org-element-property :parent element))))))


  ;;; Export variables:

  (setq org-latex-tables-centered nil)

  (setq cached-request nil)
#+END_SRC

#+RESULTS:

#+BEGIN_SRC python :session :exports none :python python3.8
  def _get_months_with_variations():
      """
      Gets months with its possible variations.
      """
      months_with_variations = []
      months = [
          " de janvier",
          " de février",
          " de mars",
          " d'avril",
          " de mai",
          " de juin",
          " de juillet",
          " d'août",
          " de septembre",
          " de octobre",
          " de novembre",
          " de décembre"
      ]

      for month in months:
         for variation in ["1ère semaine", "2e semaine", "3e semaine", "4e semaine"]:
             months_with_variations.append(variation + month)

      return months_with_variations

  def _get_transplant_date(section):
      """
      Gets months located on given section.
      """
      section = section.strip()
      section = section.lower()

      for month in months:
          month_lowercase = month.lower()
          if section.endswith(month_lowercase):
             return month

      return "—"

  def _get_sowing_date(transplant_date, week_before_transplant):
      """
      Gets months after subtract number of week.
      """
      try:
          index = months.index(transplant_date)
          sowing_index = index - week_before_transplant
          return months[sowing_index]
      except:
          return "—"

  def _get_table_by_content(content, header):
      table = []

      table.insert(0, header)
      table.insert(1, None)

      for section in content:
          rows = content[section]
          if type(rows) is dict:
              rows = rows.values()

          table.extend(rows)
          if len(rows) > 0:
              table.append(None)

      return table

  def _convert_list_to_object(keys, values):
    dictionary = dict(zip(keys, values))
    return type('new_dict', (object,), dictionary)

  def _get_content_sorted_by_date(**kwargs):
      # Filters content by date:
      content_by_date = {}
      for month in months: content_by_date[month] = []
      for section_table in kwargs["content"]:
          is_section_found = False

          for row in section_table:
              if not is_section_found:
                  section_title = row
                  transplant_date = get_transplant_date(section_title)
                  is_section_found = True

              if row != section_title and row != "hline":
                  row.append(transplant_date)
                  row = kwargs["content_hook"](_convert_list_to_object(content_columns, row))

                  if not row:
                      continue

                  date_column_value = row[kwargs["column"]]
                  if date_column_value not in content_by_date:
                      content_by_date[date_column_value] = []
                  content_by_date[date_column_value].append(row)

      # Renders table:
      return _get_table_by_content(content_by_date, kwargs["header"])

  def _get_variety(varieties, name):
      """
      Gets a variety by name.
      """
      for variety in varieties:
          if variety[2] == name:
              return _convert_list_to_object(variety_columns, variety)

  def _get_supplier(suppliers, name):
      """
      Gets a variety by name.
      """
      for supplier in suppliers:
          if supplier[0] == name:
              return _convert_list_to_object(supplier_columns, supplier)

  def transplanting_planning_table(content):
      """
      Gets transplanting planning table.
      """
      header = ["Butte", "Plant", "Quantité", "Date de transplation"]
      return _get_content_sorted_by_date(
          column=3,
          content=content,
          header=header,
          content_hook=lambda content: [
              content.reference,
              content.plant,
              content.quantity,
              content.transplant_date
          ]
      )

  def sowing_planning_table(content, varieties):
      """
      Gets sowing planning table.
      """
      def content_hook(content):
          variety = _get_variety(varieties, content.plant)
          sowing_date = _get_sowing_date(content.transplant_date, variety.week_before_transplant)
          sowing_quantity = round(float(content.quantity) * 1.4)

          if content.transplant_date == sowing_date and content.transplant_date != "—":
              return

          return [
              content.reference,
              content.plant,
              content.quantity,
              sowing_quantity,
              sowing_date
          ]

      header = ["Butte", "Plant", "Quantité", "Semis (+40%)", "Date de semis"]
      return _get_content_sorted_by_date(
          content_hook=content_hook,
          content=content,
          header=header,
          column=4
      )

  def _get_content_sorted_by_column(**kwargs):
      # Filters content by date:
      content_by_column = {}

      for section_table in kwargs["content"]:
          is_section_found = False

          for row in section_table:
              if not is_section_found:
                  section_title = row
                  is_section_found = True

              if row != section_title and row != "hline":
                  content_by_column = kwargs["content_hook"](
                      _convert_list_to_object(content_columns, row),
                      content_by_column
                  )

      # Renders table:
      return _get_table_by_content(content_by_column, kwargs["header"])


  def seeds_buying_planning_table(content, varieties, suppliers):
      def content_hook(content, data):
          variety = _get_variety(varieties, content.plant)
          content.quantity = round(float(content.quantity))

          if variety.week_before_transplant:
              content.quantity = round(content.quantity * 1.4)

          if variety.supplier not in data:
              data[variety.supplier] = {}

          if content.plant not in data[variety.supplier]:
              supplier = _get_supplier(suppliers, variety.supplier)
              try:
                  if variety.variety:
                      search_keyword = variety.variety
                  else:
                      search_keyword = variety.plant
                  search = "[[%s][%s]]" % (
                      supplier.search.format(search_keyword),
                      content.plant
                  )
              except:
                  search = content.plant
              data[variety.supplier][content.plant] = [
                  search,
                  round(content.quantity),
                  variety.supplier
              ]
          else:
              quantity = data[variety.supplier][content.plant][1]
              data[variety.supplier][content.plant][1] = round(quantity + content.quantity)

          return data

      header = ["Plant", "Quantité minimum", "Fournisseur"]
      return _get_content_sorted_by_column(
          content_hook=content_hook,
          content=content,
          header=header,
          column=2
      )

  supplier_columns = [
      "supplier",
      "search"
  ]

  content_columns = [
      "reference",
      "plant",
      "space",
      "row",
      "quantity",
      "transplant_date"
  ]

  variety_columns = [
      "plant",
      "variety",
      "name",
      "supplier",
      "space",
      "week_before_transplant"
  ]

  months = _get_months_with_variations()
#+END_SRC

#+RESULTS:
